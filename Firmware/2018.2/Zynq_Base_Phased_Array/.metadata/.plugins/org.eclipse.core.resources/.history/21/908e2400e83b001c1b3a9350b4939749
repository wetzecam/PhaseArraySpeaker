/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

# include "main.h"

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"





#include "audio/audio.h"

#include "intc/intc.h"

#include "iic/iic.h"

/***************************** Include Files *********************************/


#include "xparameters.h"
#include "xil_exception.h"
#include "xdebug.h"
#include "xiic.h"

#include "xtime_l.h"


#ifdef XPAR_INTC_0_DEVICE_ID
 #include "xintc.h"
 #include "microblaze_sleep.h"
#else
 #include "xscugic.h"
#include "sleep.h"
#include "xil_cache.h"
#endif

/************************** Function Prototypes ******************************/
#if (!defined(DEBUG))
extern void xil_printf(const char *format, ...);
#endif

/************************** Variable Definitions *****************************/
/*
 * Device instance definitions
 */

static XIic sIic;


#ifdef XPAR_INTC_0_DEVICE_ID
 static XIntc sIntc;
#else
 static XScuGic sIntc;
#endif

//
// Interrupt vector table
#ifdef XPAR_INTC_0_DEVICE_ID
const ivt_t ivt[] = {
	//IIC
	{XPAR_AXI_INTC_0_AXI_IIC_0_IIC2INTC_IRPT_INTR, (XInterruptHandler)XIic_InterruptHandler, &sIic},
	//DMA Stream to MemoryMap Interrupt handler
	{XPAR_AXI_INTC_0_AXI_DMA_0_S2MM_INTROUT_INTR, (XInterruptHandler)fnS2MMInterruptHandler, &sAxiDma},
	//DMA MemoryMap to Stream Interrupt handler
	{XPAR_AXI_INTC_0_AXI_DMA_0_MM2S_INTROUT_INTR, (XInterruptHandler)fnMM2SInterruptHandler, &sAxiDma},
	//User I/O (buttons, switches, LEDs)
	{XPAR_AXI_INTC_0_AXI_GPIO_0_IP2INTC_IRPT_INTR, (XInterruptHandler)fnUserIOIsr, &sUserIO}
};
#else
const ivt_t ivt[] = {
	//IIC
	{XPAR_FABRIC_AXI_IIC_0_IIC2INTC_IRPT_INTR, (Xil_ExceptionHandler)XIic_InterruptHandler, &sIic}

};
#endif


/**************************  *****************************/


/*****************************************************************************/
/**
*
* Main function
*
* This function is the main entry of the interrupt test. It does the following:
*	Initialize the interrupt controller
*	Initialize the IIC controller
*	Initialize the User I/O driver
*	Initialize the DMA engine
*	Initialize the Audio I2S controller
*	Enable the interrupts
*	Wait for a button event then start selected task
*	Wait for task to complete
*
* @param	None
*
* @return
*		- XST_SUCCESS if example finishes successfully
*		- XST_FAILURE if example fails.
*
* @note		None.
*
******************************************************************************/
int main(void)
{
	int Status;

	Demo.u8Verbose = 1;

	init_platform();

	//Status = fnInitAudio();
	xil_printf("\r\n\n\n\n\n\n--- Entering main() --- \r\n\n\n\n\n");
	Status = fnAudioWriteToReg(R6_POWER_MGMT, 0b000110000);

	u8 ReadData;
	Status = fnAudioReadFromReg(R0_LEFT_ADC_VOL, &ReadData);
	xil_printf("\r\n--- R0_LEFT_ADC_VOL : 0x%x --- \r\n", ReadData);

	ReadData = 0;
	Status = fnAudioReadFromReg(R1_RIGHT_ADC_VOL, &ReadData);
	xil_printf("\r\n--- R1_RIGHT_ADC_VOL : 0x%x --- \r\n", ReadData);

	ReadData = 0;
	Status = fnAudioReadFromReg(R2_LEFT_DAC_VOL, &ReadData);
	xil_printf("\r\n--- R2_LEFT_DAC_VOL : 0x%x --- \r\n", ReadData);

	ReadData = 0;
	Status = fnAudioReadFromReg(0x03, &ReadData);
	xil_printf("\r\n--- R3_RIGHT_DAC_VOL : 0x%x --- \r\n", ReadData);

	ReadData = 0;
	Status = fnAudioReadFromReg(0x04, &ReadData);
	xil_printf("\r\n--- R4_ANALOG_PATH : 0x%x --- \r\n", ReadData);

	ReadData = 0;
	Status = fnAudioReadFromReg(0x05, &ReadData);
	xil_printf("\r\n--- R5 : 0x%x --- \r\n", ReadData);

	ReadData = 0;
	Status = fnAudioReadFromReg(0x06, &ReadData);
	xil_printf("\r\n--- R6 : 0x%x --- \r\n", ReadData);

	Status = fnAudioReadFromReg(0x07, &ReadData);
	xil_printf("\r\n--- R6 : 0x%x --- \r\n", ReadData);

	Status = fnAudioReadFromReg(0x08, &ReadData);
	xil_printf("\r\n--- R6 : 0x%x --- \r\n", ReadData);

	Status = fnAudioReadFromReg(0x09, &ReadData);
	xil_printf("\r\n--- R6 : 0x%x --- \r\n", ReadData);

	Status = fnAudioReadFromReg(0x0F, &ReadData);
	xil_printf("\r\n--- R15 : 0x%x --- \r\n", ReadData);

	Status = fnAudioReadFromReg(0x10, &ReadData);
	xil_printf("\r\n--- R16 : 0x%x --- \r\n", ReadData);

	Status = fnAudioReadFromReg(0x11, &ReadData);
	xil_printf("\r\n--- R17 : 0x%x --- \r\n", ReadData);


	/*	R0_LEFT_ADC_VOL									= 0x00,
		R1_RIGHT_ADC_VOL								= 0x01,
		R2_LEFT_DAC_VOL						 			= 0x02,
		R3_RIGHT_DAC_VOL								= 0x03,
		R4_ANALOG_PATH				 					= 0x04,
		R5_DIGITAL_PATH				 					= 0x05,
		R6_POWER_MGMT					 				= 0x06,
		R7_DIGITAL_IF					 				= 0x07,
		R8_SAMPLE_RATE							 		= 0x08,
		R9_ACTIVE								 		= 0x09,
		R15_SOFTWARE_RESET				 				= 0x0F,
		R16_ALC_CONTROL_1								= 0x10,
		R17_ALC_CONTROL_2								= 0x11,
		R18_ALC_CONTROL_2
*/

	cleanup_platform();
	return 0;
}

	/*

	//
	//Initialize the interrupt controller

	Status = fnInitInterruptController(&sIntc);
	if(Status != XST_SUCCESS) {
		xil_printf("Error initializing interrupts");
		return XST_FAILURE;
	}

	// Initialize IIC controller
	Status = fnInitIic(&sIic);
	if(Status != XST_SUCCESS) {
		xil_printf("Error initializing I2C controller");
		return XST_FAILURE;
	}

	//Initialize Audio I2S
	Status = fnInitAudio();
	if(Status != XST_SUCCESS) {
		xil_printf("Audio initializing ERROR");
		return XST_FAILURE;
	}

	{
		XTime  tStart, tEnd;

		XTime_GetTime(&tStart);
		do {
			XTime_GetTime(&tEnd);
		}
		while((tEnd-tStart)/(COUNTS_PER_SECOND/10) < 20);
	}
	//Initialize Audio I2S
	Status = fnInitAudio();
	if(Status != XST_SUCCESS) {
		xil_printf("Audio initializing ERROR");
		return XST_FAILURE;
	}


	// Enable all interrupts in our interrupt vector table
	// Make sure all driver instances using interrupts are initialized first
	fnEnableInterrupts(&sIntc, &ivt[0], sizeof(ivt)/sizeof(ivt[0]));



	xil_printf("----------------------------------------------------------\r\n");
	xil_printf("Zybo Z7-10 DMA Audio Demo\r\n");
	xil_printf("----------------------------------------------------------\r\n");

    //main loop
	fnAudioStartupConfig();
	fnSetLineInput();

	xil_printf("\r\n--- Exiting main() --- \r\n");


	return XST_SUCCESS;

}
*/

/*
int main()
{
    init_platform();

    print("Hello World\n\r");

    cleanup_platform();
    return 0;
}*/
